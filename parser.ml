type token =
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MOD
  | ASSIGN
  | PLUSASSIGN
  | MINUSASSIGN
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | REFEQ
  | NOT
  | AND
  | OR
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | LBRACE
  | RBRACE
  | COMMA
  | SEMI
  | IF
  | ELIF
  | ELSE
  | FOR
  | WHILE
  | BREAK
  | CONTINUE
  | RETURN
  | MAIN
  | FUNCTION
  | NULL
  | INT of (int)
  | FLOAT
  | BOOLEAN
  | MATRIX
  | ILIT of (int)
  | FLIT of (float)
  | TRUE of (bool)
  | FALSE of (bool)
  | SLIT of (string)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 56 "parser.ml"
let yytransl_const = [|
  257 (* PLUS *);
  258 (* MINUS *);
  259 (* TIMES *);
  260 (* DIVIDE *);
  261 (* MOD *);
  262 (* ASSIGN *);
  263 (* PLUSASSIGN *);
  264 (* MINUSASSIGN *);
  265 (* EQ *);
  266 (* NEQ *);
  267 (* LT *);
  268 (* LEQ *);
  269 (* GT *);
  270 (* GEQ *);
  271 (* REFEQ *);
  272 (* NOT *);
  273 (* AND *);
  274 (* OR *);
  275 (* LPAREN *);
  276 (* RPAREN *);
  277 (* LBRACK *);
  278 (* RBRACK *);
  279 (* LBRACE *);
  280 (* RBRACE *);
  281 (* COMMA *);
  282 (* SEMI *);
  283 (* IF *);
  284 (* ELIF *);
  285 (* ELSE *);
  286 (* FOR *);
  287 (* WHILE *);
  288 (* BREAK *);
  289 (* CONTINUE *);
  290 (* RETURN *);
  291 (* MAIN *);
  292 (* FUNCTION *);
  293 (* NULL *);
  295 (* FLOAT *);
  296 (* BOOLEAN *);
  297 (* MATRIX *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  294 (* INT *);
  298 (* ILIT *);
  299 (* FLIT *);
  300 (* TRUE *);
  301 (* FALSE *);
  302 (* SLIT *);
  303 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\005\000\003\000\007\000\
\007\000\007\000\006\000\006\000\006\000\006\000\008\000\008\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\011\000\011\000\012\000\012\000\012\000\012\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\014\000\014\000\014\000\013\000\015\000\015\000\016\000\017\000\
\017\000\018\000\000\000"

let yylen = "\002\000\
\003\000\000\000\002\000\002\000\003\000\008\000\006\000\000\000\
\002\000\004\000\001\000\001\000\001\000\001\000\000\000\002\000\
\002\000\003\000\002\000\002\000\008\000\012\000\011\000\007\000\
\001\000\002\000\000\000\008\000\004\000\003\000\003\000\003\000\
\001\000\001\000\001\000\001\000\001\000\001\000\004\000\003\000\
\002\000\002\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\000\000\001\000\003\000\003\000\001\000\003\000\001\000\001\000\
\003\000\001\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\067\000\000\000\000\000\000\000\011\000\013\000\
\012\000\014\000\000\000\003\000\004\000\000\000\000\000\000\000\
\001\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\033\000\034\000\036\000\037\000\000\000\025\000\
\000\000\000\000\000\000\000\000\000\000\035\000\009\000\000\000\
\000\000\000\000\000\000\042\000\000\000\066\000\000\000\000\000\
\063\000\000\000\000\000\000\000\000\000\019\000\020\000\000\000\
\000\000\000\000\000\000\000\000\000\000\007\000\016\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\017\000\026\000\000\000\
\000\000\040\000\060\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\018\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\047\000\048\000\049\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\010\000\062\000\065\000\000\000\000\000\000\000\000\000\000\000\
\039\000\000\000\006\000\000\000\000\000\000\000\059\000\000\000\
\000\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\023\000\000\000\022\000\000\000\000\000\028\000"

let yydgoto = "\002\000\
\003\000\004\000\011\000\040\000\013\000\041\000\024\000\042\000\
\043\000\044\000\143\000\045\000\046\000\104\000\055\000\056\000\
\057\000\058\000"

let yysindex = "\003\000\
\000\000\000\000\000\000\096\001\243\254\216\254\000\000\000\000\
\000\000\000\000\015\000\000\000\000\000\248\254\044\255\047\255\
\000\000\049\255\055\255\153\255\000\000\169\255\020\255\239\254\
\071\255\071\255\071\255\043\255\069\255\072\255\081\255\076\255\
\078\255\071\255\000\000\000\000\000\000\000\000\075\255\000\000\
\060\255\085\255\169\255\009\255\084\255\000\000\000\000\088\255\
\153\255\098\255\041\255\000\000\124\000\000\000\104\255\099\255\
\000\000\106\255\071\255\246\254\071\255\000\000\000\000\242\255\
\071\255\071\255\071\255\071\255\255\254\000\000\000\000\071\255\
\071\255\071\255\071\255\071\255\071\255\071\255\071\255\071\255\
\071\255\071\255\071\255\071\255\071\255\000\000\000\000\169\255\
\082\255\000\000\000\000\043\255\043\255\144\000\198\255\092\255\
\114\255\164\000\000\000\224\000\224\000\224\000\106\000\129\255\
\071\255\041\255\041\255\000\000\000\000\000\000\114\001\114\001\
\094\255\094\255\094\255\094\255\114\001\099\001\082\001\127\255\
\000\000\000\000\000\000\130\255\148\255\071\255\133\255\071\255\
\000\000\224\000\000\000\169\255\004\000\169\255\000\000\134\255\
\071\255\135\255\137\255\184\000\000\000\142\255\143\255\139\255\
\071\255\141\255\169\255\204\000\169\255\149\255\159\255\160\255\
\000\000\169\255\000\000\162\255\137\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\013\255\000\000\163\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\022\000\000\000\
\000\000\000\000\163\255\000\000\000\000\000\000\000\000\000\000\
\000\000\216\255\040\000\000\000\000\000\000\000\000\000\167\255\
\000\000\067\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\175\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\163\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\171\255\172\255\189\255\202\255\000\000\
\000\000\060\000\080\000\000\000\000\000\000\000\059\255\044\001\
\234\000\252\000\014\001\032\001\056\001\104\001\045\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\175\255\
\000\000\197\255\000\000\163\255\000\000\163\255\000\000\000\000\
\000\000\000\000\103\255\000\000\000\000\000\000\136\255\000\000\
\000\000\000\000\163\255\000\000\163\255\000\000\000\000\000\000\
\000\000\163\255\000\000\000\000\103\255\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\220\000\000\000\012\000\000\000\230\255\
\000\000\231\255\075\000\175\000\000\000\109\000\146\000\000\000\
\147\000\000\000"

let yytablesize = 649
let yytable = "\051\000\
\052\000\053\000\048\000\001\000\105\000\015\000\016\000\049\000\
\064\000\072\000\073\000\074\000\075\000\076\000\017\000\014\000\
\071\000\077\000\078\000\079\000\080\000\081\000\082\000\083\000\
\021\000\084\000\085\000\007\000\008\000\009\000\010\000\023\000\
\008\000\094\000\086\000\098\000\095\000\008\000\018\000\100\000\
\101\000\102\000\103\000\074\000\075\000\076\000\106\000\107\000\
\108\000\109\000\110\000\111\000\112\000\113\000\114\000\115\000\
\116\000\117\000\118\000\119\000\089\000\120\000\044\000\019\000\
\044\000\020\000\047\000\050\000\050\000\044\000\044\000\096\000\
\025\000\050\000\021\000\050\000\050\000\022\000\050\000\130\000\
\065\000\066\000\067\000\050\000\050\000\054\000\026\000\059\000\
\064\000\027\000\060\000\028\000\064\000\068\000\072\000\073\000\
\074\000\075\000\076\000\061\000\133\000\062\000\103\000\063\000\
\027\000\136\000\069\000\138\000\070\000\087\000\088\000\140\000\
\035\000\036\000\037\000\038\000\068\000\050\000\027\000\148\000\
\150\000\027\000\152\000\027\000\092\000\091\000\027\000\156\000\
\121\000\027\000\093\000\027\000\027\000\027\000\027\000\027\000\
\027\000\021\000\125\000\126\000\027\000\027\000\027\000\027\000\
\027\000\027\000\027\000\027\000\129\000\027\000\131\000\021\000\
\132\000\105\000\021\000\134\000\021\000\139\000\141\000\021\000\
\145\000\147\000\021\000\149\000\142\000\021\000\021\000\021\000\
\021\000\021\000\025\000\146\000\153\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\154\000\021\000\155\000\
\026\000\157\000\015\000\027\000\061\000\028\000\007\000\008\000\
\009\000\010\000\057\000\029\000\032\000\030\000\030\000\031\000\
\032\000\033\000\034\000\065\000\066\000\067\000\007\000\008\000\
\009\000\010\000\035\000\036\000\037\000\038\000\031\000\039\000\
\038\000\038\000\038\000\038\000\038\000\058\000\029\000\012\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\158\000\
\038\000\038\000\097\000\038\000\135\000\122\000\000\000\123\000\
\038\000\038\000\072\000\073\000\074\000\075\000\076\000\000\000\
\000\000\000\000\077\000\078\000\079\000\080\000\081\000\082\000\
\083\000\000\000\084\000\085\000\072\000\073\000\074\000\075\000\
\076\000\000\000\000\000\099\000\077\000\078\000\079\000\080\000\
\081\000\082\000\083\000\000\000\084\000\085\000\038\000\038\000\
\038\000\038\000\038\000\000\000\000\000\137\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\000\000\038\000\038\000\
\041\000\041\000\000\000\000\000\000\000\000\000\000\000\038\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\000\000\
\041\000\041\000\000\000\041\000\045\000\045\000\000\000\000\000\
\041\000\041\000\000\000\000\000\045\000\045\000\045\000\045\000\
\045\000\045\000\045\000\000\000\045\000\045\000\000\000\045\000\
\046\000\046\000\000\000\000\000\045\000\045\000\000\000\000\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\000\000\
\046\000\046\000\000\000\046\000\000\000\000\000\000\000\000\000\
\046\000\046\000\072\000\073\000\074\000\075\000\076\000\000\000\
\000\000\000\000\077\000\078\000\079\000\080\000\081\000\082\000\
\083\000\000\000\084\000\085\000\072\000\073\000\074\000\075\000\
\076\000\000\000\128\000\000\000\077\000\078\000\079\000\080\000\
\081\000\082\000\083\000\000\000\084\000\085\000\000\000\090\000\
\072\000\073\000\074\000\075\000\076\000\000\000\000\000\000\000\
\077\000\078\000\079\000\080\000\081\000\082\000\083\000\000\000\
\084\000\085\000\000\000\124\000\072\000\073\000\074\000\075\000\
\076\000\000\000\000\000\000\000\077\000\078\000\079\000\080\000\
\081\000\082\000\083\000\000\000\084\000\085\000\000\000\127\000\
\072\000\073\000\074\000\075\000\076\000\000\000\000\000\000\000\
\077\000\078\000\079\000\080\000\081\000\082\000\083\000\000\000\
\084\000\085\000\000\000\144\000\072\000\073\000\074\000\075\000\
\076\000\000\000\000\000\000\000\077\000\078\000\079\000\080\000\
\081\000\082\000\083\000\000\000\084\000\085\000\000\000\151\000\
\072\000\073\000\074\000\075\000\076\000\000\000\000\000\000\000\
\077\000\078\000\079\000\080\000\081\000\082\000\083\000\000\000\
\084\000\085\000\052\000\052\000\052\000\052\000\052\000\052\000\
\052\000\000\000\052\000\052\000\000\000\052\000\000\000\000\000\
\000\000\000\000\052\000\052\000\053\000\053\000\053\000\053\000\
\053\000\053\000\053\000\000\000\053\000\053\000\000\000\053\000\
\000\000\000\000\000\000\000\000\053\000\053\000\054\000\054\000\
\054\000\054\000\054\000\054\000\054\000\000\000\054\000\054\000\
\000\000\054\000\000\000\000\000\000\000\000\000\054\000\054\000\
\055\000\055\000\055\000\055\000\055\000\055\000\055\000\000\000\
\055\000\055\000\000\000\055\000\051\000\051\000\000\000\000\000\
\055\000\055\000\051\000\000\000\051\000\051\000\000\000\051\000\
\056\000\056\000\000\000\000\000\051\000\051\000\056\000\000\000\
\056\000\056\000\000\000\056\000\000\000\000\000\000\000\000\000\
\056\000\056\000\072\000\073\000\074\000\075\000\076\000\000\000\
\000\000\000\000\077\000\078\000\079\000\080\000\081\000\082\000\
\083\000\000\000\084\000\072\000\073\000\074\000\075\000\076\000\
\000\000\000\000\000\000\077\000\078\000\079\000\080\000\081\000\
\082\000\083\000\072\000\073\000\074\000\075\000\076\000\000\000\
\043\000\043\000\000\000\043\000\079\000\080\000\081\000\082\000\
\043\000\043\000\005\000\006\000\000\000\007\000\008\000\009\000\
\010\000"

let yycheck = "\025\000\
\026\000\027\000\020\001\001\000\006\001\019\001\047\001\025\001\
\034\000\001\001\002\001\003\001\004\001\005\001\000\000\004\000\
\043\000\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\026\001\017\001\018\001\038\001\039\001\040\001\041\001\020\000\
\020\001\059\000\026\001\061\000\047\001\025\001\047\001\065\000\
\066\000\067\000\068\000\003\001\004\001\005\001\072\000\073\000\
\074\000\075\000\076\000\077\000\078\000\079\000\080\000\081\000\
\082\000\083\000\084\000\085\000\049\000\088\000\018\001\020\001\
\020\001\019\001\047\001\009\001\010\001\025\001\026\001\060\000\
\002\001\015\001\026\001\017\001\018\001\023\001\020\001\105\000\
\006\001\007\001\008\001\025\001\026\001\043\001\016\001\019\001\
\022\001\019\001\019\001\021\001\026\001\019\001\001\001\002\001\
\003\001\004\001\005\001\019\001\126\000\026\001\128\000\026\001\
\002\001\132\000\047\001\134\000\024\001\026\001\023\001\137\000\
\042\001\043\001\044\001\045\001\019\001\047\001\016\001\145\000\
\147\000\019\001\149\000\021\001\026\001\022\001\024\001\154\000\
\047\001\027\001\025\001\029\001\030\001\031\001\032\001\033\001\
\034\001\002\001\047\001\026\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\020\001\047\001\024\001\016\001\
\023\001\006\001\019\001\023\001\021\001\024\001\024\001\024\001\
\019\001\023\001\027\001\023\001\028\001\030\001\031\001\032\001\
\033\001\034\001\002\001\029\001\024\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\023\001\047\001\024\001\
\016\001\024\001\024\001\019\001\022\001\021\001\038\001\039\001\
\040\001\041\001\020\001\027\001\026\001\026\001\030\001\031\001\
\032\001\033\001\034\001\006\001\007\001\008\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\026\001\047\001\
\001\001\002\001\003\001\004\001\005\001\020\001\026\001\004\000\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\157\000\
\017\001\018\001\060\000\020\001\128\000\092\000\255\255\093\000\
\025\001\026\001\001\001\002\001\003\001\004\001\005\001\255\255\
\255\255\255\255\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\255\255\017\001\018\001\001\001\002\001\003\001\004\001\
\005\001\255\255\255\255\026\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\255\255\017\001\018\001\001\001\002\001\
\003\001\004\001\005\001\255\255\255\255\026\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\255\255\017\001\018\001\
\001\001\002\001\255\255\255\255\255\255\255\255\255\255\026\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\255\255\
\017\001\018\001\255\255\020\001\001\001\002\001\255\255\255\255\
\025\001\026\001\255\255\255\255\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\255\255\017\001\018\001\255\255\020\001\
\001\001\002\001\255\255\255\255\025\001\026\001\255\255\255\255\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\255\255\
\017\001\018\001\255\255\020\001\255\255\255\255\255\255\255\255\
\025\001\026\001\001\001\002\001\003\001\004\001\005\001\255\255\
\255\255\255\255\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\255\255\017\001\018\001\001\001\002\001\003\001\004\001\
\005\001\255\255\025\001\255\255\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\255\255\017\001\018\001\255\255\020\001\
\001\001\002\001\003\001\004\001\005\001\255\255\255\255\255\255\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\255\255\
\017\001\018\001\255\255\020\001\001\001\002\001\003\001\004\001\
\005\001\255\255\255\255\255\255\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\255\255\017\001\018\001\255\255\020\001\
\001\001\002\001\003\001\004\001\005\001\255\255\255\255\255\255\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\255\255\
\017\001\018\001\255\255\020\001\001\001\002\001\003\001\004\001\
\005\001\255\255\255\255\255\255\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\255\255\017\001\018\001\255\255\020\001\
\001\001\002\001\003\001\004\001\005\001\255\255\255\255\255\255\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\255\255\
\017\001\018\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\255\255\017\001\018\001\255\255\020\001\255\255\255\255\
\255\255\255\255\025\001\026\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\255\255\017\001\018\001\255\255\020\001\
\255\255\255\255\255\255\255\255\025\001\026\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\255\255\017\001\018\001\
\255\255\020\001\255\255\255\255\255\255\255\255\025\001\026\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\255\255\
\017\001\018\001\255\255\020\001\009\001\010\001\255\255\255\255\
\025\001\026\001\015\001\255\255\017\001\018\001\255\255\020\001\
\009\001\010\001\255\255\255\255\025\001\026\001\015\001\255\255\
\017\001\018\001\255\255\020\001\255\255\255\255\255\255\255\255\
\025\001\026\001\001\001\002\001\003\001\004\001\005\001\255\255\
\255\255\255\255\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\255\255\017\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\255\255\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\001\001\002\001\003\001\004\001\005\001\255\255\
\017\001\018\001\255\255\020\001\011\001\012\001\013\001\014\001\
\025\001\026\001\035\001\036\001\255\255\038\001\039\001\040\001\
\041\001"

let yynames_const = "\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MOD\000\
  ASSIGN\000\
  PLUSASSIGN\000\
  MINUSASSIGN\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  REFEQ\000\
  NOT\000\
  AND\000\
  OR\000\
  LPAREN\000\
  RPAREN\000\
  LBRACK\000\
  RBRACK\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  SEMI\000\
  IF\000\
  ELIF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  BREAK\000\
  CONTINUE\000\
  RETURN\000\
  MAIN\000\
  FUNCTION\000\
  NULL\000\
  FLOAT\000\
  BOOLEAN\000\
  MATRIX\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  ILIT\000\
  FLIT\000\
  TRUE\000\
  FALSE\000\
  SLIT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'main) in
    Obj.repr(
# 38 "parser.mly"
                        ({ 
    decls = _1;
    main = _2; 
})
# 443 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 44 "parser.mly"
              ( { vars = []; func = []; } )
# 449 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 45 "parser.mly"
              ( { vars = _2 :: _1.vars; func = _1.func; } )
# 457 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 46 "parser.mly"
              ( { vars = _1.vars; func = _2 :: _1.func; } )
# 465 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dtype) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 48 "parser.mly"
                     ( _1, _2 )
# 473 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'formals) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 56 "parser.mly"
                                                             (
    {
        fname = _2;
        formals = List.rev _4;
        stmts = List.rev _7;
    }
)
# 488 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 64 "parser.mly"
                                             (
    {
        stmts = List.rev _5
    }
)
# 499 "parser.ml"
               : 'main))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "parser.mly"
              ( [] )
# 505 "parser.ml"
               : 'formals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'dtype) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 72 "parser.mly"
           ( [(_1, _2)] )
# 513 "parser.ml"
               : 'formals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formals) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'dtype) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 73 "parser.mly"
                         ( (_3, _4) :: _1 )
# 522 "parser.ml"
               : 'formals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 76 "parser.mly"
      ( Int )
# 529 "parser.ml"
               : 'dtype))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "parser.mly"
          ( Bool )
# 535 "parser.ml"
               : 'dtype))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "parser.mly"
        ( Float )
# 541 "parser.ml"
               : 'dtype))
; (fun __caml_parser_env ->
    Obj.repr(
# 79 "parser.mly"
         ( Matrix )
# 547 "parser.ml"
               : 'dtype))
; (fun __caml_parser_env ->
    Obj.repr(
# 83 "parser.mly"
                 ( [] )
# 553 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmts) in
    Obj.repr(
# 84 "parser.mly"
             ( _1 :: _2 )
# 561 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 87 "parser.mly"
            ( Expr (_1) )
# 568 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 88 "parser.mly"
                   ( Return (_2) )
# 575 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 90 "parser.mly"
             ( Break )
# 581 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 91 "parser.mly"
                ( Continue )
# 587 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'stmts) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'elifstmts) in
    Obj.repr(
# 92 "parser.mly"
                                                      (If(_3, _6, _8))
# 596 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 9 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 6 : 'stmts) in
    let _8 = (Parsing.peek_val __caml_parser_env 4 : 'elifstmts) in
    let _11 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 93 "parser.mly"
                                                                               (IfElse(_3, _6, _8, _11))
# 606 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'assignstmt) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 95 "parser.mly"
                                                                       (For(_3, _5, _7, _10))
# 616 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 96 "parser.mly"
                                                (While(_3, _6))
# 624 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 97 "parser.mly"
        ( VDeclare(_1) )
# 631 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'assignstmt) in
    Obj.repr(
# 98 "parser.mly"
                  ( AssignStmt(_1) )
# 638 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 101 "parser.mly"
                 ( [] )
# 644 "parser.ml"
               : 'elifstmts))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'stmts) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'elifstmts) in
    Obj.repr(
# 102 "parser.mly"
                                                        ( Elif(_3, _6, _8) )
# 653 "parser.ml"
               : 'elifstmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'dtype) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                       ( VDeAssign(_1, _2, _4) )
# 662 "parser.ml"
               : 'assignstmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                     ( Assign(_1, Binop(_1, AddEq, _3)) )
# 670 "parser.ml"
               : 'assignstmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                      ( Assign(_1, Binop(_1, SubEq, _3)) )
# 678 "parser.ml"
               : 'assignstmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                 ( Assign(_1, _3) )
# 686 "parser.ml"
               : 'assignstmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 113 "parser.mly"
       ( iLit(_1) )
# 693 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 114 "parser.mly"
       ( fLit(_1) )
# 700 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'MLIT) in
    Obj.repr(
# 115 "parser.mly"
       ( mLit(_1) )
# 707 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 116 "parser.mly"
       ( Bool(true) )
# 714 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 117 "parser.mly"
        ( Bool(false) )
# 721 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 118 "parser.mly"
       ( Id(_1) )
# 728 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'inputs) in
    Obj.repr(
# 119 "parser.mly"
                          ( Func(_1,_3) )
# 736 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                     ( _2 )
# 743 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                   ( Unary(_2) )
# 750 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                   ( Negate(_2) )
# 757 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                   ( Binop(_1, And, _3) )
# 765 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                   ( Binop(_1, Or, _3) )
# 773 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                   ( Binop(_1, Add, _3) )
# 781 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                   ( Binop(_1, Sub, _3) )
# 789 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                   ( Binop(_1, Mult, _3) )
# 797 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                   ( Binop(_1, Div, _3) )
# 805 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                ( Binop(_1, Mod, _3) )
# 813 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                ( Binop(_1, Eq, _3) )
# 821 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                ( Binop(_1, Neq, _3) )
# 829 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                ( Binop(_1, Less, _3) )
# 837 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                ( Binop(_1, Leq, _3) )
# 845 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                ( Binop(_1, Greater, _3) )
# 853 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 135 "parser.mly"
                ( Binop(_1, Geq, _3) )
# 861 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 136 "parser.mly"
                   ( Binop(_1, Req, _3) )
# 869 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 139 "parser.mly"
                 ( [] )
# 875 "parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 140 "parser.mly"
                 ( [_1] )
# 882 "parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'inputs) in
    Obj.repr(
# 141 "parser.mly"
                       ( _1 :: _3 )
# 890 "parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'matrix_row_list) in
    Obj.repr(
# 144 "parser.mly"
                                ( _2 )
# 897 "parser.ml"
               : 'MLIT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'matrix_row) in
    Obj.repr(
# 147 "parser.mly"
             ( [_1] )
# 904 "parser.ml"
               : 'matrix_row_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'matrix_row) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'matrix_row_list) in
    Obj.repr(
# 148 "parser.mly"
                                  ( _1 :: _3 )
# 912 "parser.ml"
               : 'matrix_row_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'elements) in
    Obj.repr(
# 151 "parser.mly"
           ( _1 )
# 919 "parser.ml"
               : 'matrix_row))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'element) in
    Obj.repr(
# 154 "parser.mly"
          ( [_1] )
# 926 "parser.ml"
               : 'elements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'element) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'elements) in
    Obj.repr(
# 155 "parser.mly"
                         ( _1 :: _3 )
# 934 "parser.ml"
               : 'elements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 157 "parser.mly"
              ( _1 )
# 941 "parser.ml"
               : 'element))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)

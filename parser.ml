type token =
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MOD
  | ASSIGN
  | PLUSASSIGN
  | MINUSASSIGN
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | REFEQ
  | NOT
  | AND
  | OR
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | LBRACE
  | RBRACE
  | COMMA
  | SEMI
  | IF
  | ELIF
  | ELSE
  | FOR
  | WHILE
  | BREAK
  | CONTINUE
  | RETURN
  | MAIN
  | FUNCTION
  | NULL
  | INT of (int)
  | FLOAT
  | BOOLEAN
  | MATRIX
  | ILIT of (int)
  | FLIT of (float)
  | TRUE of (bool)
  | FALSE of (bool)
  | SLIT of (string)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 56 "parser.ml"
let yytransl_const = [|
  257 (* PLUS *);
  258 (* MINUS *);
  259 (* TIMES *);
  260 (* DIVIDE *);
  261 (* MOD *);
  262 (* ASSIGN *);
  263 (* PLUSASSIGN *);
  264 (* MINUSASSIGN *);
  265 (* EQ *);
  266 (* NEQ *);
  267 (* LT *);
  268 (* LEQ *);
  269 (* GT *);
  270 (* GEQ *);
  271 (* REFEQ *);
  272 (* NOT *);
  273 (* AND *);
  274 (* OR *);
  275 (* LPAREN *);
  276 (* RPAREN *);
  277 (* LBRACK *);
  278 (* RBRACK *);
  279 (* LBRACE *);
  280 (* RBRACE *);
  281 (* COMMA *);
  282 (* SEMI *);
  283 (* IF *);
  284 (* ELIF *);
  285 (* ELSE *);
  286 (* FOR *);
  287 (* WHILE *);
  288 (* BREAK *);
  289 (* CONTINUE *);
  290 (* RETURN *);
  291 (* MAIN *);
  292 (* FUNCTION *);
  293 (* NULL *);
  295 (* FLOAT *);
  296 (* BOOLEAN *);
  297 (* MATRIX *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  294 (* INT *);
  298 (* ILIT *);
  299 (* FLIT *);
  300 (* TRUE *);
  301 (* FALSE *);
  302 (* SLIT *);
  303 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\005\000\003\000\007\000\
\007\000\007\000\006\000\006\000\006\000\006\000\008\000\008\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\011\000\011\000\012\000\012\000\012\000\012\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\014\000\014\000\014\000\013\000\015\000\015\000\016\000\017\000\
\017\000\018\000\000\000"

let yylen = "\002\000\
\003\000\000\000\002\000\002\000\003\000\008\000\006\000\000\000\
\002\000\004\000\001\000\001\000\001\000\001\000\000\000\002\000\
\002\000\003\000\002\000\002\000\008\000\012\000\011\000\007\000\
\001\000\001\000\000\000\008\000\005\000\004\000\004\000\004\000\
\001\000\001\000\001\000\001\000\001\000\001\000\004\000\003\000\
\002\000\002\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\000\000\001\000\003\000\003\000\001\000\003\000\001\000\001\000\
\003\000\001\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\067\000\000\000\000\000\000\000\011\000\013\000\
\012\000\014\000\000\000\003\000\004\000\000\000\000\000\000\000\
\001\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\033\000\034\000\036\000\037\000\000\000\025\000\
\000\000\000\000\000\000\000\000\026\000\035\000\009\000\000\000\
\000\000\000\000\000\000\000\000\000\000\066\000\000\000\000\000\
\063\000\000\000\000\000\000\000\000\000\019\000\020\000\000\000\
\000\000\000\000\000\000\000\000\000\000\007\000\016\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\017\000\000\000\000\000\
\040\000\060\000\000\000\000\000\000\000\000\000\000\000\018\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\010\000\062\000\065\000\
\000\000\000\000\000\000\032\000\030\000\031\000\000\000\039\000\
\000\000\006\000\000\000\000\000\000\000\059\000\029\000\000\000\
\000\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\023\000\000\000\022\000\000\000\000\000\028\000"

let yydgoto = "\002\000\
\003\000\004\000\011\000\040\000\013\000\041\000\024\000\042\000\
\043\000\044\000\143\000\045\000\046\000\101\000\055\000\056\000\
\057\000\058\000"

let yysindex = "\003\000\
\000\000\000\000\000\000\098\000\243\254\227\254\000\000\000\000\
\000\000\000\000\046\000\000\000\000\000\016\255\055\255\066\255\
\000\000\060\255\065\255\156\255\000\000\172\255\044\255\239\254\
\071\255\071\255\071\255\053\255\074\255\082\255\084\255\078\255\
\080\255\071\255\000\000\000\000\000\000\000\000\092\255\000\000\
\062\255\086\255\172\255\011\255\000\000\000\000\000\000\094\255\
\156\255\100\255\027\255\095\001\251\000\000\000\102\255\103\255\
\000\000\101\255\071\255\172\255\071\255\000\000\000\000\245\255\
\071\255\071\255\071\255\071\255\001\255\000\000\000\000\071\255\
\071\255\071\255\071\255\071\255\071\255\071\255\071\255\071\255\
\071\255\071\255\071\255\071\255\071\255\000\000\172\255\087\255\
\000\000\000\000\053\255\053\255\015\001\105\255\035\001\000\000\
\007\000\025\000\043\000\233\000\122\255\071\255\027\255\027\255\
\048\255\048\255\048\255\113\001\113\001\203\001\203\001\203\001\
\203\001\113\001\095\001\095\001\119\255\000\000\000\000\000\000\
\129\255\071\255\131\255\000\000\000\000\000\000\071\255\000\000\
\061\000\000\000\172\255\079\000\172\255\000\000\000\000\132\255\
\071\255\133\255\134\255\055\001\000\000\140\255\135\255\138\255\
\071\255\144\255\172\255\075\001\172\255\151\255\145\255\152\255\
\000\000\172\255\000\000\161\255\134\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\049\255\000\000\163\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\097\000\000\000\
\000\000\000\000\163\255\000\000\000\000\000\000\000\000\000\000\
\000\000\219\255\069\255\241\254\000\000\000\000\000\000\167\255\
\000\000\050\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\170\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\163\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\178\255\000\000\000\000\187\000\207\000\
\115\000\141\000\167\000\202\001\204\001\123\001\141\001\159\001\
\177\001\216\001\013\255\042\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\170\255\000\000\
\000\000\000\000\163\255\000\000\163\255\000\000\000\000\000\000\
\000\000\000\000\106\255\000\000\000\000\000\000\139\255\000\000\
\000\000\000\000\163\255\000\000\163\255\000\000\000\000\000\000\
\000\000\163\255\000\000\000\000\106\255\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\188\000\000\000\015\000\000\000\230\255\
\140\000\231\255\044\000\000\000\000\000\080\000\117\000\000\000\
\126\000\000\000"

let yytablesize = 754
let yytable = "\051\000\
\052\000\053\000\048\000\001\000\042\000\015\000\102\000\049\000\
\064\000\042\000\042\000\072\000\073\000\074\000\075\000\076\000\
\071\000\016\000\014\000\077\000\078\000\079\000\080\000\081\000\
\082\000\083\000\021\000\084\000\085\000\074\000\075\000\076\000\
\043\000\093\000\023\000\095\000\086\000\043\000\043\000\097\000\
\098\000\099\000\100\000\084\000\085\000\017\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\110\000\111\000\112\000\
\113\000\114\000\115\000\116\000\117\000\044\000\018\000\088\000\
\084\000\085\000\044\000\044\000\008\000\041\000\041\000\064\000\
\025\000\008\000\019\000\064\000\129\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\020\000\021\000\026\000\022\000\
\041\000\027\000\047\000\028\000\059\000\041\000\041\000\054\000\
\132\000\065\000\066\000\067\000\060\000\100\000\061\000\062\000\
\136\000\063\000\138\000\027\000\069\000\070\000\068\000\140\000\
\035\000\036\000\037\000\038\000\087\000\050\000\068\000\148\000\
\150\000\027\000\152\000\090\000\027\000\092\000\027\000\156\000\
\091\000\027\000\122\000\027\000\027\000\118\000\027\000\027\000\
\027\000\027\000\027\000\027\000\021\000\128\000\130\000\027\000\
\027\000\027\000\027\000\027\000\027\000\027\000\027\000\131\000\
\027\000\133\000\021\000\139\000\141\000\021\000\145\000\021\000\
\147\000\142\000\021\000\146\000\021\000\021\000\149\000\154\000\
\021\000\021\000\021\000\021\000\021\000\025\000\153\000\155\000\
\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\157\000\021\000\015\000\026\000\061\000\057\000\027\000\012\000\
\028\000\007\000\008\000\009\000\010\000\058\000\029\000\094\000\
\158\000\030\000\031\000\032\000\033\000\034\000\134\000\119\000\
\000\000\007\000\008\000\009\000\010\000\035\000\036\000\037\000\
\038\000\120\000\039\000\038\000\038\000\038\000\038\000\038\000\
\000\000\000\000\000\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\000\000\038\000\038\000\000\000\038\000\000\000\
\000\000\000\000\000\000\038\000\038\000\072\000\073\000\074\000\
\075\000\076\000\000\000\000\000\000\000\077\000\078\000\079\000\
\080\000\081\000\082\000\083\000\000\000\084\000\085\000\072\000\
\073\000\074\000\075\000\076\000\000\000\000\000\096\000\077\000\
\078\000\079\000\080\000\081\000\082\000\083\000\000\000\084\000\
\085\000\072\000\073\000\074\000\075\000\076\000\000\000\000\000\
\124\000\077\000\078\000\079\000\080\000\081\000\082\000\083\000\
\000\000\084\000\085\000\072\000\073\000\074\000\075\000\076\000\
\000\000\000\000\125\000\077\000\078\000\079\000\080\000\081\000\
\082\000\083\000\000\000\084\000\085\000\072\000\073\000\074\000\
\075\000\076\000\000\000\000\000\126\000\077\000\078\000\079\000\
\080\000\081\000\082\000\083\000\000\000\084\000\085\000\072\000\
\073\000\074\000\075\000\076\000\000\000\000\000\135\000\077\000\
\078\000\079\000\080\000\081\000\082\000\083\000\000\000\084\000\
\085\000\038\000\038\000\038\000\038\000\038\000\000\000\000\000\
\137\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\000\000\038\000\038\000\047\000\047\000\047\000\047\000\047\000\
\000\000\000\000\038\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\000\000\000\000\005\000\006\000\047\000\007\000\
\008\000\009\000\010\000\047\000\047\000\048\000\048\000\048\000\
\048\000\048\000\000\000\000\000\000\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\000\000\000\000\000\000\000\000\
\048\000\000\000\000\000\000\000\000\000\048\000\048\000\049\000\
\049\000\049\000\049\000\049\000\000\000\000\000\000\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\000\000\000\000\
\000\000\000\000\049\000\045\000\045\000\000\000\000\000\049\000\
\049\000\000\000\000\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\000\000\000\000\000\000\000\000\045\000\046\000\
\046\000\000\000\000\000\045\000\045\000\000\000\000\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\000\000\000\000\
\000\000\000\000\046\000\000\000\000\000\000\000\000\000\046\000\
\046\000\072\000\073\000\074\000\075\000\076\000\000\000\000\000\
\000\000\077\000\078\000\079\000\080\000\081\000\082\000\083\000\
\000\000\084\000\085\000\072\000\073\000\074\000\075\000\076\000\
\000\000\127\000\000\000\077\000\078\000\079\000\080\000\081\000\
\082\000\083\000\000\000\084\000\085\000\000\000\089\000\072\000\
\073\000\074\000\075\000\076\000\000\000\000\000\000\000\077\000\
\078\000\079\000\080\000\081\000\082\000\083\000\000\000\084\000\
\085\000\000\000\121\000\072\000\073\000\074\000\075\000\076\000\
\000\000\000\000\000\000\077\000\078\000\079\000\080\000\081\000\
\082\000\083\000\000\000\084\000\085\000\000\000\123\000\072\000\
\073\000\074\000\075\000\076\000\000\000\000\000\000\000\077\000\
\078\000\079\000\080\000\081\000\082\000\083\000\000\000\084\000\
\085\000\000\000\144\000\072\000\073\000\074\000\075\000\076\000\
\000\000\000\000\000\000\077\000\078\000\079\000\080\000\081\000\
\082\000\083\000\000\000\084\000\085\000\000\000\151\000\072\000\
\073\000\074\000\075\000\076\000\000\000\000\000\000\000\077\000\
\078\000\079\000\080\000\081\000\082\000\083\000\000\000\084\000\
\085\000\072\000\073\000\074\000\075\000\076\000\000\000\000\000\
\000\000\000\000\000\000\079\000\080\000\081\000\082\000\000\000\
\000\000\084\000\085\000\052\000\052\000\052\000\052\000\052\000\
\052\000\052\000\000\000\000\000\000\000\000\000\052\000\000\000\
\000\000\000\000\000\000\052\000\052\000\053\000\053\000\053\000\
\053\000\053\000\053\000\053\000\000\000\000\000\000\000\000\000\
\053\000\000\000\000\000\000\000\000\000\053\000\053\000\054\000\
\054\000\054\000\054\000\054\000\054\000\054\000\000\000\000\000\
\000\000\000\000\054\000\000\000\000\000\000\000\000\000\054\000\
\054\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
\000\000\000\000\000\000\000\000\055\000\000\000\000\000\000\000\
\000\000\055\000\055\000\072\000\073\000\074\000\075\000\076\000\
\000\000\000\000\050\000\050\000\051\000\051\000\000\000\000\000\
\050\000\000\000\051\000\084\000\085\000\050\000\000\000\051\000\
\056\000\056\000\050\000\050\000\051\000\051\000\056\000\000\000\
\000\000\000\000\000\000\056\000\000\000\000\000\000\000\000\000\
\056\000\056\000"

let yycheck = "\025\000\
\026\000\027\000\020\001\001\000\020\001\019\001\006\001\025\001\
\034\000\025\001\026\001\001\001\002\001\003\001\004\001\005\001\
\043\000\047\001\004\000\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\026\001\017\001\018\001\003\001\004\001\005\001\
\020\001\059\000\020\000\061\000\026\001\025\001\026\001\065\000\
\066\000\067\000\068\000\017\001\018\001\000\000\072\000\073\000\
\074\000\075\000\076\000\077\000\078\000\079\000\080\000\081\000\
\082\000\083\000\084\000\085\000\087\000\020\001\047\001\049\000\
\017\001\018\001\025\001\026\001\020\001\001\001\002\001\022\001\
\002\001\025\001\020\001\026\001\102\000\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\019\001\026\001\016\001\023\001\
\020\001\019\001\047\001\021\001\019\001\025\001\026\001\043\001\
\122\000\006\001\007\001\008\001\019\001\127\000\019\001\026\001\
\131\000\026\001\133\000\002\001\047\001\024\001\019\001\137\000\
\042\001\043\001\044\001\045\001\023\001\047\001\019\001\145\000\
\147\000\016\001\149\000\022\001\019\001\025\001\021\001\154\000\
\026\001\024\001\026\001\026\001\027\001\047\001\029\001\030\001\
\031\001\032\001\033\001\034\001\002\001\020\001\024\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\023\001\
\047\001\023\001\016\001\024\001\024\001\019\001\019\001\021\001\
\023\001\028\001\024\001\029\001\026\001\027\001\023\001\023\001\
\030\001\031\001\032\001\033\001\034\001\002\001\024\001\024\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\024\001\047\001\024\001\016\001\022\001\020\001\019\001\004\000\
\021\001\038\001\039\001\040\001\041\001\020\001\027\001\060\000\
\157\000\030\001\031\001\032\001\033\001\034\001\127\000\091\000\
\255\255\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\092\000\047\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\255\255\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\255\255\017\001\018\001\255\255\020\001\255\255\
\255\255\255\255\255\255\025\001\026\001\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\255\255\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\255\255\017\001\018\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\026\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\255\255\017\001\
\018\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\026\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\017\001\018\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\026\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\255\255\017\001\018\001\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\026\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\255\255\017\001\018\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\026\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\255\255\017\001\
\018\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\026\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\017\001\018\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\026\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\255\255\255\255\035\001\036\001\020\001\038\001\
\039\001\040\001\041\001\025\001\026\001\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\255\255\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\255\255\255\255\255\255\255\255\
\020\001\255\255\255\255\255\255\255\255\025\001\026\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\255\255\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\255\255\255\255\
\255\255\255\255\020\001\001\001\002\001\255\255\255\255\025\001\
\026\001\255\255\255\255\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\255\255\255\255\255\255\255\255\020\001\001\001\
\002\001\255\255\255\255\025\001\026\001\255\255\255\255\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\255\255\255\255\
\255\255\255\255\020\001\255\255\255\255\255\255\255\255\025\001\
\026\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\255\255\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\017\001\018\001\001\001\002\001\003\001\004\001\005\001\
\255\255\025\001\255\255\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\255\255\017\001\018\001\255\255\020\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\255\255\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\255\255\017\001\
\018\001\255\255\020\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\255\255\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\255\255\017\001\018\001\255\255\020\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\255\255\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\255\255\017\001\
\018\001\255\255\020\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\255\255\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\255\255\017\001\018\001\255\255\020\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\255\255\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\255\255\017\001\
\018\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\255\255\255\255\255\255\011\001\012\001\013\001\014\001\255\255\
\255\255\017\001\018\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\255\255\255\255\255\255\255\255\020\001\255\255\
\255\255\255\255\255\255\025\001\026\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\255\255\255\255\255\255\255\255\
\020\001\255\255\255\255\255\255\255\255\025\001\026\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\255\255\255\255\
\255\255\255\255\020\001\255\255\255\255\255\255\255\255\025\001\
\026\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\255\255\255\255\255\255\020\001\255\255\255\255\255\255\
\255\255\025\001\026\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\009\001\010\001\009\001\010\001\255\255\255\255\
\015\001\255\255\015\001\017\001\018\001\020\001\255\255\020\001\
\009\001\010\001\025\001\026\001\025\001\026\001\015\001\255\255\
\255\255\255\255\255\255\020\001\255\255\255\255\255\255\255\255\
\025\001\026\001"

let yynames_const = "\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MOD\000\
  ASSIGN\000\
  PLUSASSIGN\000\
  MINUSASSIGN\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  REFEQ\000\
  NOT\000\
  AND\000\
  OR\000\
  LPAREN\000\
  RPAREN\000\
  LBRACK\000\
  RBRACK\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  SEMI\000\
  IF\000\
  ELIF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  BREAK\000\
  CONTINUE\000\
  RETURN\000\
  MAIN\000\
  FUNCTION\000\
  NULL\000\
  FLOAT\000\
  BOOLEAN\000\
  MATRIX\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  ILIT\000\
  FLIT\000\
  TRUE\000\
  FALSE\000\
  SLIT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'main) in
    Obj.repr(
# 35 "parser.mly"
                        ({ 
    decls = _1;
    main = _2; 
})
# 469 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 41 "parser.mly"
              ( { vars = []; func = []; } )
# 475 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 42 "parser.mly"
              ( { vars = _2 :: _1.vars; func = _1.func; } )
# 483 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 43 "parser.mly"
              ( { vars = _1.vars; func = _2 :: _1.func; } )
# 491 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dtype) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 45 "parser.mly"
                     ( _1, _2 )
# 499 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'formals) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 47 "parser.mly"
                                                             (
    {
        fname = _2;
        formals = List.rev _4;
        stmts = List.rev _7;
    }
)
# 514 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 55 "parser.mly"
                                             (
    {
        stmts = List.rev _5
    }
)
# 525 "parser.ml"
               : 'main))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
              ( [] )
# 531 "parser.ml"
               : 'formals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'dtype) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 63 "parser.mly"
           ( [(_1, _2)] )
# 539 "parser.ml"
               : 'formals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formals) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'dtype) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 64 "parser.mly"
                         ( (_3, _4) :: _1 )
# 548 "parser.ml"
               : 'formals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 67 "parser.mly"
      ( Int )
# 555 "parser.ml"
               : 'dtype))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "parser.mly"
          ( Bool )
# 561 "parser.ml"
               : 'dtype))
; (fun __caml_parser_env ->
    Obj.repr(
# 69 "parser.mly"
        ( Float )
# 567 "parser.ml"
               : 'dtype))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "parser.mly"
         ( Matrix )
# 573 "parser.ml"
               : 'dtype))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "parser.mly"
                 ( [] )
# 579 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmts) in
    Obj.repr(
# 75 "parser.mly"
             ( _1 :: _2 )
# 587 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 78 "parser.mly"
            ( Expr (_1) )
# 594 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 79 "parser.mly"
                   ( Return (_2) )
# 601 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "parser.mly"
             ( Break )
# 607 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "parser.mly"
                ( Continue )
# 613 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'stmts) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'elifstmts) in
    Obj.repr(
# 83 "parser.mly"
                                                      (If(_3, _6, _8))
# 622 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 9 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 6 : 'stmts) in
    let _8 = (Parsing.peek_val __caml_parser_env 4 : 'elifstmts) in
    let _11 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 84 "parser.mly"
                                                                               (IfElse(_3, _6, _8, _11))
# 632 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'stmt) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 86 "parser.mly"
                                                                 (For(_3, _5, _7, _10))
# 642 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 87 "parser.mly"
                                                (While(_3, _6))
# 650 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 88 "parser.mly"
        ( VDeclare(_1) )
# 657 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assignstmt) in
    Obj.repr(
# 89 "parser.mly"
             ( AssignStmt(_1) )
# 664 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 92 "parser.mly"
                 ( [] )
# 670 "parser.ml"
               : 'elifstmts))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'stmts) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'elifstmts) in
    Obj.repr(
# 93 "parser.mly"
                                                        ( Elif(_3, _6, _8) )
# 679 "parser.ml"
               : 'elifstmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'dtype) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
                            ( VDeAssign(_1, _2, _4) )
# 688 "parser.ml"
               : 'assignstmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                          ( Assign(_1, Binop(_1, AddEq, _3)) )
# 696 "parser.ml"
               : 'assignstmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
                           ( Assign(_1, Binop(_1, SubEq, _3)) )
# 704 "parser.ml"
               : 'assignstmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
                      ( Assign(_1, _3) )
# 712 "parser.ml"
               : 'assignstmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 103 "parser.mly"
       ( iLit(_1) )
# 719 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 104 "parser.mly"
       ( fLit(_1) )
# 726 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'MLIT) in
    Obj.repr(
# 105 "parser.mly"
       ( mLit(_1) )
# 733 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 106 "parser.mly"
       ( Bool(true) )
# 740 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 107 "parser.mly"
        ( Bool(false) )
# 747 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 108 "parser.mly"
       ( Id(_1) )
# 754 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'inputs) in
    Obj.repr(
# 109 "parser.mly"
                          ( Func(_1,_3) )
# 762 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                     ( _2 )
# 769 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                   ( Unary(_2) )
# 776 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                   ( Negate(_2) )
# 783 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                   ( Binop(_1, And, _3) )
# 791 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                   ( Binop(_1, Or, _3) )
# 799 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                   ( Binop(_1, Add, _3) )
# 807 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                   ( Binop(_1, Sub, _3) )
# 815 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                   ( Binop(_1, Mult, _3) )
# 823 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                   ( Binop(_1, Div, _3) )
# 831 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                ( Binop(_1, Mod, _3) )
# 839 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                ( Binop(_1, Eq, _3) )
# 847 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                ( Binop(_1, Neq, _3) )
# 855 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                ( Binop(_1, Less, _3) )
# 863 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                ( Binop(_1, Leq, _3) )
# 871 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                ( Binop(_1, Greater, _3) )
# 879 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                ( Binop(_1, Geq, _3) )
# 887 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                   ( Binop(_1, Req, _3) )
# 895 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 129 "parser.mly"
                 ( [] )
# 901 "parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                 ( [_1] )
# 908 "parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'inputs) in
    Obj.repr(
# 131 "parser.mly"
                       ( _1 :: _3 )
# 916 "parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'matrix_row_list) in
    Obj.repr(
# 134 "parser.mly"
                                ( _2 )
# 923 "parser.ml"
               : 'MLIT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'matrix_row) in
    Obj.repr(
# 137 "parser.mly"
             ( [_1] )
# 930 "parser.ml"
               : 'matrix_row_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'matrix_row) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'matrix_row_list) in
    Obj.repr(
# 138 "parser.mly"
                                  ( _1 :: _3 )
# 938 "parser.ml"
               : 'matrix_row_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'elements) in
    Obj.repr(
# 141 "parser.mly"
           ( _1 )
# 945 "parser.ml"
               : 'matrix_row))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'element) in
    Obj.repr(
# 144 "parser.mly"
          ( [_1] )
# 952 "parser.ml"
               : 'elements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'element) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'elements) in
    Obj.repr(
# 145 "parser.mly"
                         ( _1 :: _3 )
# 960 "parser.ml"
               : 'elements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 147 "parser.mly"
              ( _1 )
# 967 "parser.ml"
               : 'element))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)

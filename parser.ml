type token =
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MOD
  | ASSIGN
  | PLUSASSIGN
  | MINUSASSIGN
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | REFEQ
  | NOT
  | AND
  | OR
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | LBRACE
  | RBRACE
  | COMMA
  | SEMI
  | IF
  | ELIF
  | ELSE
  | FOR
  | WHILE
  | BREAK
  | CONTINUE
  | RETURN
  | MAIN
  | FUNCTION
  | NULL
  | INT of (int)
  | FLOAT
  | BOOLEAN
  | MATRIX
  | ILIT of (int)
  | FLIT of (float)
  | TRUE of (bool)
  | FALSE of (bool)
  | SLIT of (string)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 56 "parser.ml"
let yytransl_const = [|
  257 (* PLUS *);
  258 (* MINUS *);
  259 (* TIMES *);
  260 (* DIVIDE *);
  261 (* MOD *);
  262 (* ASSIGN *);
  263 (* PLUSASSIGN *);
  264 (* MINUSASSIGN *);
  265 (* EQ *);
  266 (* NEQ *);
  267 (* LT *);
  268 (* LEQ *);
  269 (* GT *);
  270 (* GEQ *);
  271 (* REFEQ *);
  272 (* NOT *);
  273 (* AND *);
  274 (* OR *);
  275 (* LPAREN *);
  276 (* RPAREN *);
  277 (* LBRACK *);
  278 (* RBRACK *);
  279 (* LBRACE *);
  280 (* RBRACE *);
  281 (* COMMA *);
  282 (* SEMI *);
  283 (* IF *);
  284 (* ELIF *);
  285 (* ELSE *);
  286 (* FOR *);
  287 (* WHILE *);
  288 (* BREAK *);
  289 (* CONTINUE *);
  290 (* RETURN *);
  291 (* MAIN *);
  292 (* FUNCTION *);
  293 (* NULL *);
  295 (* FLOAT *);
  296 (* BOOLEAN *);
  297 (* MATRIX *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  294 (* INT *);
  298 (* ILIT *);
  299 (* FLIT *);
  300 (* TRUE *);
  301 (* FALSE *);
  302 (* SLIT *);
  303 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\005\000\003\000\007\000\
\007\000\007\000\006\000\006\000\006\000\006\000\008\000\008\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\011\000\011\000\012\000\012\000\012\000\012\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\014\000\014\000\014\000\013\000\015\000\
\015\000\016\000\017\000\017\000\018\000\000\000"

let yylen = "\002\000\
\003\000\000\000\002\000\002\000\003\000\008\000\006\000\000\000\
\002\000\004\000\001\000\001\000\001\000\001\000\000\000\002\000\
\002\000\003\000\008\000\012\000\011\000\007\000\001\000\001\000\
\000\000\008\000\005\000\004\000\004\000\004\000\001\000\001\000\
\001\000\001\000\001\000\001\000\004\000\003\000\002\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\000\000\001\000\003\000\003\000\001\000\
\003\000\001\000\001\000\003\000\001\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\062\000\000\000\000\000\000\000\011\000\013\000\
\012\000\014\000\000\000\003\000\004\000\000\000\000\000\000\000\
\001\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\031\000\
\032\000\034\000\035\000\000\000\023\000\000\000\000\000\000\000\
\000\000\024\000\033\000\009\000\000\000\000\000\000\000\000\000\
\000\000\061\000\000\000\000\000\058\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\000\
\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\017\000\000\000\000\000\
\038\000\055\000\000\000\000\000\000\000\000\000\000\000\018\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\010\000\057\000\060\000\000\000\000\000\
\000\000\030\000\028\000\029\000\000\000\037\000\000\000\006\000\
\000\000\000\000\000\000\054\000\027\000\000\000\000\000\000\000\
\000\000\000\000\022\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\021\000\000\000\
\020\000\000\000\000\000\026\000"

let yydgoto = "\002\000\
\003\000\004\000\011\000\037\000\013\000\038\000\024\000\039\000\
\040\000\041\000\133\000\042\000\043\000\093\000\051\000\052\000\
\053\000\054\000"

let yysindex = "\012\000\
\000\000\000\000\000\000\200\255\007\255\234\254\000\000\000\000\
\000\000\000\000\033\000\000\000\000\000\248\254\020\255\037\255\
\000\000\032\255\038\255\107\255\000\000\123\255\021\255\004\255\
\130\255\130\255\042\255\063\255\067\255\074\255\130\255\000\000\
\000\000\000\000\000\000\065\255\000\000\053\255\088\255\123\255\
\243\255\000\000\000\000\000\000\091\255\107\255\097\255\000\255\
\197\000\000\000\099\255\093\255\000\000\103\255\130\255\123\255\
\130\255\005\000\130\255\130\255\130\255\130\255\252\254\000\000\
\000\000\130\255\130\255\130\255\130\255\130\255\130\255\130\255\
\130\255\130\255\130\255\130\255\130\255\000\000\123\255\077\255\
\000\000\000\000\042\255\042\255\217\000\105\255\237\000\000\000\
\023\000\041\000\059\000\006\255\109\255\130\255\000\255\000\255\
\128\255\128\255\120\001\135\001\135\001\133\000\133\000\133\000\
\133\000\135\001\131\255\000\000\000\000\000\000\129\255\130\255\
\133\255\000\000\000\000\000\000\130\255\000\000\077\000\000\000\
\123\255\095\000\123\255\000\000\000\000\134\255\130\255\135\255\
\132\255\001\001\000\000\150\255\142\255\153\255\130\255\160\255\
\123\255\021\001\123\255\161\255\170\255\171\255\000\000\123\255\
\000\000\172\255\132\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\039\255\000\000\180\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\113\000\000\000\000\000\000\000\180\255\
\000\000\000\000\000\000\000\000\000\000\000\000\177\255\131\000\
\000\000\000\000\000\000\162\255\000\000\001\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\174\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\180\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\185\255\000\000\000\000\151\000\171\000\
\197\255\217\255\083\255\079\255\081\255\033\001\051\001\069\001\
\087\001\094\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\174\255\000\000\000\000\000\000\
\180\255\000\000\180\255\000\000\000\000\000\000\000\000\000\000\
\036\255\000\000\000\000\000\000\096\255\000\000\000\000\000\000\
\180\255\000\000\180\255\000\000\000\000\000\000\000\000\180\255\
\000\000\000\000\036\255\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\209\000\000\000\008\000\000\000\230\255\
\158\000\231\255\068\000\000\000\000\000\099\000\141\000\000\000\
\149\000\000\000"

let yytablesize = 661
let yytable = "\048\000\
\049\000\094\000\068\000\069\000\070\000\058\000\066\000\067\000\
\068\000\069\000\070\000\014\000\001\000\065\000\071\000\072\000\
\073\000\074\000\075\000\076\000\077\000\021\000\059\000\045\000\
\016\000\015\000\059\000\023\000\046\000\085\000\117\000\087\000\
\017\000\089\000\090\000\091\000\092\000\025\000\018\000\019\000\
\095\000\096\000\097\000\098\000\099\000\100\000\101\000\102\000\
\103\000\104\000\105\000\106\000\107\000\080\000\025\000\020\000\
\025\000\021\000\008\000\025\000\022\000\025\000\025\000\008\000\
\025\000\025\000\025\000\044\000\119\000\025\000\059\000\060\000\
\061\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\055\000\025\000\062\000\050\000\056\000\122\000\045\000\
\045\000\046\000\046\000\092\000\057\000\045\000\126\000\046\000\
\128\000\019\000\045\000\063\000\046\000\130\000\044\000\045\000\
\045\000\046\000\046\000\044\000\044\000\138\000\140\000\064\000\
\142\000\079\000\019\000\062\000\019\000\146\000\083\000\019\000\
\082\000\019\000\019\000\108\000\025\000\019\000\019\000\084\000\
\118\000\019\000\112\000\025\000\070\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\026\000\019\000\027\000\
\007\000\008\000\009\000\010\000\026\000\028\000\027\000\121\000\
\029\000\030\000\120\000\123\000\031\000\129\000\131\000\132\000\
\007\000\008\000\009\000\010\000\032\000\033\000\034\000\035\000\
\135\000\036\000\136\000\032\000\033\000\034\000\035\000\137\000\
\047\000\036\000\036\000\036\000\036\000\036\000\139\000\056\000\
\143\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
\144\000\052\000\145\000\147\000\036\000\042\000\042\000\042\000\
\042\000\036\000\036\000\015\000\053\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\012\000\086\000\148\000\124\000\
\042\000\043\000\043\000\043\000\043\000\042\000\042\000\109\000\
\000\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\110\000\000\000\005\000\006\000\043\000\007\000\008\000\009\000\
\010\000\043\000\043\000\066\000\067\000\068\000\069\000\070\000\
\000\000\000\000\000\000\071\000\072\000\073\000\074\000\075\000\
\076\000\077\000\000\000\000\000\000\000\066\000\067\000\068\000\
\069\000\070\000\000\000\000\000\078\000\071\000\072\000\073\000\
\074\000\075\000\076\000\077\000\000\000\000\000\000\000\066\000\
\067\000\068\000\069\000\070\000\000\000\000\000\088\000\071\000\
\072\000\073\000\074\000\075\000\076\000\077\000\000\000\000\000\
\000\000\066\000\067\000\068\000\069\000\070\000\000\000\000\000\
\114\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\000\000\000\000\000\000\066\000\067\000\068\000\069\000\070\000\
\000\000\000\000\115\000\071\000\072\000\073\000\074\000\075\000\
\076\000\077\000\000\000\000\000\000\000\066\000\067\000\068\000\
\069\000\070\000\000\000\000\000\116\000\071\000\072\000\073\000\
\074\000\075\000\076\000\077\000\000\000\000\000\000\000\066\000\
\067\000\068\000\069\000\070\000\000\000\000\000\125\000\071\000\
\072\000\073\000\074\000\075\000\076\000\077\000\000\000\000\000\
\000\000\036\000\036\000\036\000\036\000\036\000\000\000\000\000\
\127\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
\000\000\000\000\000\000\039\000\039\000\066\000\067\000\068\000\
\069\000\070\000\036\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\000\000\000\000\000\000\000\000\039\000\040\000\
\040\000\000\000\000\000\039\000\039\000\000\000\000\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\000\000\000\000\
\000\000\000\000\040\000\041\000\041\000\000\000\000\000\040\000\
\040\000\000\000\000\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\000\000\000\000\000\000\000\000\041\000\000\000\
\000\000\000\000\000\000\041\000\041\000\066\000\067\000\068\000\
\069\000\070\000\000\000\000\000\000\000\071\000\072\000\073\000\
\074\000\075\000\076\000\077\000\000\000\000\000\000\000\000\000\
\081\000\066\000\067\000\068\000\069\000\070\000\000\000\000\000\
\000\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\000\000\000\000\000\000\000\000\111\000\066\000\067\000\068\000\
\069\000\070\000\000\000\000\000\000\000\071\000\072\000\073\000\
\074\000\075\000\076\000\077\000\000\000\000\000\000\000\000\000\
\113\000\066\000\067\000\068\000\069\000\070\000\000\000\000\000\
\000\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\000\000\000\000\000\000\000\000\134\000\066\000\067\000\068\000\
\069\000\070\000\000\000\000\000\000\000\071\000\072\000\073\000\
\074\000\075\000\076\000\077\000\000\000\000\000\000\000\000\000\
\141\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\000\000\000\000\000\000\000\000\047\000\000\000\000\000\000\000\
\000\000\047\000\047\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\000\000\000\000\000\000\000\000\048\000\000\000\
\000\000\000\000\000\000\048\000\048\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\000\000\000\000\000\000\000\000\
\049\000\000\000\000\000\000\000\000\000\049\000\049\000\050\000\
\050\000\050\000\050\000\050\000\050\000\050\000\051\000\051\000\
\000\000\000\000\050\000\000\000\051\000\000\000\000\000\050\000\
\050\000\051\000\000\000\000\000\000\000\000\000\051\000\051\000\
\066\000\067\000\068\000\069\000\070\000\000\000\000\000\000\000\
\071\000\072\000\073\000\074\000\075\000\076\000\077\000\066\000\
\067\000\068\000\069\000\070\000\000\000\000\000\000\000\000\000\
\000\000\073\000\074\000\075\000\076\000"

let yycheck = "\025\000\
\026\000\006\001\003\001\004\001\005\001\031\000\001\001\002\001\
\003\001\004\001\005\001\004\000\001\000\040\000\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\026\001\022\001\020\001\
\047\001\019\001\026\001\020\000\025\001\055\000\025\001\057\000\
\000\000\059\000\060\000\061\000\062\000\002\001\047\001\020\001\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\076\000\077\000\079\000\046\000\019\001\019\001\
\021\001\026\001\020\001\024\001\023\001\026\001\027\001\025\001\
\029\001\030\001\031\001\047\001\094\000\034\001\006\001\007\001\
\008\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\019\001\047\001\019\001\043\001\019\001\112\000\009\001\
\010\001\009\001\010\001\117\000\019\001\015\001\121\000\015\001\
\123\000\002\001\020\001\047\001\020\001\127\000\020\001\025\001\
\026\001\025\001\026\001\025\001\026\001\135\000\137\000\024\001\
\139\000\023\001\019\001\019\001\021\001\144\000\026\001\024\001\
\022\001\026\001\027\001\047\001\002\001\030\001\031\001\025\001\
\020\001\034\001\026\001\002\001\005\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\019\001\047\001\021\001\
\038\001\039\001\040\001\041\001\019\001\027\001\021\001\023\001\
\030\001\031\001\024\001\023\001\034\001\024\001\024\001\028\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\019\001\047\001\029\001\042\001\043\001\044\001\045\001\023\001\
\047\001\001\001\002\001\003\001\004\001\005\001\023\001\022\001\
\024\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\023\001\020\001\024\001\024\001\020\001\001\001\002\001\003\001\
\004\001\025\001\026\001\024\001\020\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\004\000\056\000\147\000\117\000\
\020\001\001\001\002\001\003\001\004\001\025\001\026\001\083\000\
\255\255\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\084\000\255\255\035\001\036\001\020\001\038\001\039\001\040\001\
\041\001\025\001\026\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\255\255\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\255\255\255\255\255\255\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\026\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\255\255\255\255\255\255\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\026\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\026\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\255\255\255\255\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\026\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\255\255\255\255\255\255\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\026\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\255\255\255\255\255\255\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\026\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\026\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\255\255\255\255\001\001\002\001\001\001\002\001\003\001\
\004\001\005\001\026\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\255\255\255\255\255\255\255\255\020\001\001\001\
\002\001\255\255\255\255\025\001\026\001\255\255\255\255\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\255\255\255\255\
\255\255\255\255\020\001\001\001\002\001\255\255\255\255\025\001\
\026\001\255\255\255\255\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\255\255\255\255\255\255\255\255\020\001\255\255\
\255\255\255\255\255\255\025\001\026\001\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\255\255\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\255\255\255\255\255\255\255\255\
\020\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\255\255\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\255\255\255\255\255\255\020\001\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\255\255\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\255\255\255\255\255\255\255\255\
\020\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\255\255\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\255\255\255\255\255\255\020\001\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\255\255\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\255\255\255\255\255\255\255\255\
\020\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\255\255\255\255\255\255\020\001\255\255\255\255\255\255\
\255\255\025\001\026\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\255\255\255\255\255\255\255\255\020\001\255\255\
\255\255\255\255\255\255\025\001\026\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\255\255\255\255\255\255\255\255\
\020\001\255\255\255\255\255\255\255\255\025\001\026\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\009\001\010\001\
\255\255\255\255\020\001\255\255\015\001\255\255\255\255\025\001\
\026\001\020\001\255\255\255\255\255\255\255\255\025\001\026\001\
\001\001\002\001\003\001\004\001\005\001\255\255\255\255\255\255\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\255\255\255\255\
\255\255\011\001\012\001\013\001\014\001"

let yynames_const = "\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MOD\000\
  ASSIGN\000\
  PLUSASSIGN\000\
  MINUSASSIGN\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  REFEQ\000\
  NOT\000\
  AND\000\
  OR\000\
  LPAREN\000\
  RPAREN\000\
  LBRACK\000\
  RBRACK\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  SEMI\000\
  IF\000\
  ELIF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  BREAK\000\
  CONTINUE\000\
  RETURN\000\
  MAIN\000\
  FUNCTION\000\
  NULL\000\
  FLOAT\000\
  BOOLEAN\000\
  MATRIX\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  ILIT\000\
  FLIT\000\
  TRUE\000\
  FALSE\000\
  SLIT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'main) in
    Obj.repr(
# 35 "parser.mly"
                        ( { 
  decls = _1;
  main = _2;
} )
# 440 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 41 "parser.mly"
              ( { vars = []; func = []; } )
# 446 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 42 "parser.mly"
              ( { vars = _2 :: _1.vars; func = _1.func; } )
# 454 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 43 "parser.mly"
              ( { vars = _1.vars; func = _2 :: _1.func; } )
# 462 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dtype) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 45 "parser.mly"
                     ( _1, _2 )
# 470 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'formals) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 47 "parser.mly"
                                                             (
    {
        fname = _2;
        formals = List.rev _4;
        stmts = List.rev _7;
    }
)
# 485 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 55 "parser.mly"
                                             (
    {
        stmts = List.rev _5;
    }
)
# 496 "parser.ml"
               : 'main))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
              ( [] )
# 502 "parser.ml"
               : 'formals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'dtype) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 63 "parser.mly"
           ( [(_1, _2)] )
# 510 "parser.ml"
               : 'formals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formals) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'dtype) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 64 "parser.mly"
                         ( (_3, _4) :: _1 )
# 519 "parser.ml"
               : 'formals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 67 "parser.mly"
      ( Int )
# 526 "parser.ml"
               : 'dtype))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "parser.mly"
          ( Bool )
# 532 "parser.ml"
               : 'dtype))
; (fun __caml_parser_env ->
    Obj.repr(
# 69 "parser.mly"
        ( Float )
# 538 "parser.ml"
               : 'dtype))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "parser.mly"
         ( Matrix )
# 544 "parser.ml"
               : 'dtype))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "parser.mly"
                 ( [] )
# 550 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmts) in
    Obj.repr(
# 75 "parser.mly"
             ( _1 :: _2 )
# 558 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 78 "parser.mly"
            ( Expr (_1) )
# 565 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 79 "parser.mly"
                   ( Return (_2) )
# 572 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'stmts) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'elifstmts) in
    Obj.repr(
# 83 "parser.mly"
                                                      (If(_3, _6, _8))
# 581 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 9 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 6 : 'stmts) in
    let _8 = (Parsing.peek_val __caml_parser_env 4 : 'elifstmts) in
    let _11 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 84 "parser.mly"
                                                                               (IfElse(_3, _6, _8, _11))
# 591 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'stmt) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 86 "parser.mly"
                                                                 (For(_3, _5, _7, _10))
# 601 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 87 "parser.mly"
                                                (While(_3, _6))
# 609 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 88 "parser.mly"
        ( VDeclare(_1) )
# 616 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assignstmt) in
    Obj.repr(
# 89 "parser.mly"
             ( AssignStmt(_1) )
# 623 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 92 "parser.mly"
                 ( [] )
# 629 "parser.ml"
               : 'elifstmts))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'stmts) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'elifstmts) in
    Obj.repr(
# 93 "parser.mly"
                                                        ( Elif(_3, _6, _8) )
# 638 "parser.ml"
               : 'elifstmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'dtype) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
                            ( VDeAssign(_1, _2, _4) )
# 647 "parser.ml"
               : 'assignstmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                          ( Assign(_1, Binop(_1, AddEq, _3)) )
# 655 "parser.ml"
               : 'assignstmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
                           ( Assign(_1, Binop(_1, SubEq, _3)) )
# 663 "parser.ml"
               : 'assignstmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
                      ( Assign(_1, _3) )
# 671 "parser.ml"
               : 'assignstmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 103 "parser.mly"
       ( iLit(_1) )
# 678 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 104 "parser.mly"
       ( fLit(_1) )
# 685 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'MLIT) in
    Obj.repr(
# 105 "parser.mly"
       ( mLit(_1) )
# 692 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 106 "parser.mly"
       ( Bool(true) )
# 699 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 107 "parser.mly"
        ( Bool(false) )
# 706 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 108 "parser.mly"
       ( Id(_1) )
# 713 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'inputs) in
    Obj.repr(
# 109 "parser.mly"
                          ( Func(_1,_3) )
# 721 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                     ( _2 )
# 728 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                  ( Unary(_2) )
# 735 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                   ( Binop(_1, Add, _3) )
# 743 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                   ( Binop(_1, Sub, _3) )
# 751 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                   ( Binop(_1, Mult, _3) )
# 759 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                   ( Binop(_1, Div, _3) )
# 767 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                ( Binop(_1, Mod, _3) )
# 775 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                ( Binop(_1, Eq, _3) )
# 783 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                ( Binop(_1, Neq, _3) )
# 791 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                ( Binop(_1, Less, _3) )
# 799 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                ( Binop(_1, Leq, _3) )
# 807 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                ( Binop(_1, Greater, _3) )
# 815 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                ( Binop(_1, Geq, _3) )
# 823 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                   ( Binop(_1, Req, _3) )
# 831 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 127 "parser.mly"
                 ( [] )
# 837 "parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                 ( [_1] )
# 844 "parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'inputs) in
    Obj.repr(
# 129 "parser.mly"
                       ( _1 :: _3 )
# 852 "parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'matrix_row_list) in
    Obj.repr(
# 132 "parser.mly"
                                ( _2 )
# 859 "parser.ml"
               : 'MLIT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'matrix_row) in
    Obj.repr(
# 135 "parser.mly"
             ( [_1] )
# 866 "parser.ml"
               : 'matrix_row_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'matrix_row) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'matrix_row_list) in
    Obj.repr(
# 136 "parser.mly"
                                  ( _1 :: _3 )
# 874 "parser.ml"
               : 'matrix_row_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'elements) in
    Obj.repr(
# 139 "parser.mly"
           ( _1 )
# 881 "parser.ml"
               : 'matrix_row))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'element) in
    Obj.repr(
# 142 "parser.mly"
          ( [_1] )
# 888 "parser.ml"
               : 'elements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'element) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'elements) in
    Obj.repr(
# 143 "parser.mly"
                         ( _1 :: _3 )
# 896 "parser.ml"
               : 'elements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 145 "parser.mly"
              ( _1 )
# 903 "parser.ml"
               : 'element))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
